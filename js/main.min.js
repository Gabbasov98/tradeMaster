$(".burger").click(function () {
    if($(".header").hasClass("_open")){
        $(".header").removeClass("_open")
        $("body").removeClass("fixed-body")
        removeBodyPadding("body")
        removeBodyPadding(".header")
    } else{
        $(".header").addClass("_open")
        $("body").addClass("fixed-body")
        addBodyPadding("body")
        addBodyPadding(".header")
    }
})


$(".mob-menu__btn._search").click(function () {
    if(window.innerWidth<993){
        $(".header-search").slideToggle()
        return
    }
    $(".header-search").addClass("_active")
    $("body").addClass("fixed-body")
    addBodyPadding("body")
    addBodyPadding(".header")
})

$("._close-search").click(function () {
    if(window.innerWidth<993){
        $(".header-search").slideToggle()
        return
    }
    $(".header-search").removeClass("_active")
    $("body").removeClass("fixed-body")
    removeBodyPadding("body")
    removeBodyPadding(".header")
})

function mainSlider() {
    var swiper = new Swiper('.main-slider .swiper-container', {
        slidesPerView: "auto",
        spaceBetween: 0,
        navigation: {
            nextEl: '.main-slider .swiper-button-next',
            prevEl: '.main-slider .swiper-button-prev',
        },
        pagination: {
            el: '.main-slider .swiper-pagination',
            type: 'bullets',
            clickable: true,
        },
    })
}

function projectSlider() {
    var swiper = new Swiper('.project-slider .swiper-container', {
        slidesPerView: 1,
        spaceBetween: 0,
        navigation: {
            nextEl: '.project-slider .swiper-button-next',
            prevEl: '.project-slider .swiper-button-prev',
        },
    })
}

function productsSlider() {
    var swiper = new Swiper('.products .swiper-container', {
        slidesPerView: "auto",
        spaceBetween: 0,
        navigation: {
            nextEl: '.products .swiper-button-next',
            prevEl: '.products .swiper-button-prev',
        },
        pagination: {
            el: '.products .swiper-pagination',
            type: 'bullets',
            clickable: true,
        },
    })
}

function collectionSlider() {
    var swiper = new Swiper('.collection .swiper-container', {
        slidesPerView: "auto",
        spaceBetween: 0,
        navigation: {
            nextEl: '.collection .swiper-button-next',
            prevEl: '.collection .swiper-button-prev',
        },
        pagination: {
            el: '.collection .swiper-pagination',
            type: 'progressbar',
        },
        scrollbar: {
            el: '.collection .swiper-scrollbar',
            draggable: true,
        },
    })
}

function objectsSlider() {
    var swiper = new Swiper('.objects .swiper-container', {
        slidesPerView: "auto",
        spaceBetween: 0,
        direction: "vertical",
        loop: true,
        navigation: {
            nextEl: '.objects .swiper-button-next',
            prevEl: '.objects .swiper-button-prev',
        },
        pagination: {
            el: '.objects .swiper-pagination',
            type: 'bullets',
            clickable: true,
        },
        breakpoints: {
            320: {
                direction: "horizontal",
            },
            992: {
                direction: "vertical",
            }
        }
    })
}

function gallery() {
    var swiper = new Swiper(".gallery .mySwiper", {
        spaceBetween: 0,
        slidesPerView: "auto",
        freeMode: true,
        watchSlidesProgress: true,
        direction: "vertical",
    });
    var swiper2 = new Swiper(".gallery .mySwiper2", {
        spaceBetween: 0,
        slidesPerView: "auto",
        thumbs: {
            swiper: swiper,
        },
        navigation: {
            nextEl: '.gallery .swiper-button-next',
            prevEl: '.gallery .swiper-button-prev',
        },
    });
}



mainSlider()
productsSlider()
collectionSlider()
objectsSlider()
gallery()
projectSlider()
// Sliders()

if (document.querySelector('#video')) {
    let video = document.querySelector('#video');

    video.addEventListener('click', function () {
        video.play();
    }, false);
    video.click();
    video.play();
}

$(".footer-group__show").click(function () {
    $(this).parents(".footer-group").toggleClass("_active")
    $(this).siblings(".footer-group__hidden").slideToggle()
})

$(".products").mouseout(function () {
    $(this).removeClass("_active")
})


$(".product-card2").mouseover(function () {
    $(".products").addClass("_active")
    let sectionRect = document.querySelector(".products").getBoundingClientRect()
    let rect = this.getBoundingClientRect()
    // console.log(sectionRect)
    // console.log(rect)
    let hoverProps = {
        x: rect.x,
        y: rect.y - sectionRect.y,
        width: rect.width,
        height: rect.height
    }

    $(".products__hover").css({
        "left": `${hoverProps.x}px`,
        "top": `${hoverProps.y}px`,
        "width": `${hoverProps.width}px`,
        "height": `${hoverProps.height}px`,
    })
    console.log(hoverProps)

})

window.addEventListener('DOMContentLoaded', () => {
    gsap.registerPlugin(ScrollTrigger);
    if(document.querySelector(".index-page")){
        indexPageAnim()
    }
    if(document.querySelector(".c-page")){
        productCardAnim()
        titleAnim()
    }
    if(document.querySelector(".c-page2")){
        catalog2PageAnim()
        backBtnAnim()
    }
    if(document.querySelector(".c-page3")){
        catalog3PageAnim()
        backBtnAnim()
    }
    if(document.querySelector(".catalog-item-page")){
        catalogItemPageAnim()
        gsap.from(".gallery,.product-info",{
            opacity: 0,
            duration: 2,
            ease: "power4"
        })
    }
    if(document.querySelector(".contacts-page")){
        titleAnim()
        gsap.from(".contacts",{
            opacity: 0,
            duration: 2,
            ease: "power4"
        })
    }

    // gradientAnim()
})

function catalog3PageAnim() {
    categoryCardAnim()
    titleAnim()
}

function catalog2PageAnim() {
    productCardAnim2()
    titleAnim()
}

function catalogItemPageAnim() {
    productCardAnim2()
    titleAnim()
}

function indexPageAnim() {
    gsap.from(".main-slider",{
        opacity: 0,
        xPercent: 100,
        duration: 2,
        ease: "power4"
    })

    productCardAnim()
    productCardAnim2()

    let workCards = document.querySelectorAll(".work-card")
    workCards.forEach(card => {
        cardAnimation(card)
    })


    titleAnim()
}


function backBtnAnim(){
    gsap.from(".page-top__back", {
        x: -100,
        opacity: 0,
        duration: 1,
        scrollTrigger: {
            trigger: ".page-top__back",
            start: 'top bottom',
            toggleActions: 'play none none reverse'
        }
    })
}

function titleAnim() {
    let titles = document.querySelectorAll(".text52")
    titles.forEach(title => {
        titleAnimation(title)
    })
}


function productCardAnim() {
    let productCards = document.querySelectorAll(".product-card2")

    productCards.forEach(card => {
        let title = card.querySelector(".product-card2__top")
        let img = card.querySelector(".product-card2__img")

        const tl = gsap.timeline({
            scrollTrigger: {
                trigger: card,
                start: 'top bottom',
            }
        })

        tl.from(title, {
            x: 100,
            opacity: 0,
            duration: 2,
            ease: "power4"
        }, 0.4)
        .from(img, {
            x: -100,
            opacity: 0,
            duration: 2,
            ease: "power4"
        },'<')
    })
}

function productCardAnim2() {
    let productCards = document.querySelectorAll(".product-card3,.product-card4")

    productCards.forEach(card => {
        let img = card.querySelector(".product-card3__img")
        let info = card.querySelector(".product-card3__info")
        let props = card.querySelector(".product-card3__props")

        const tl = gsap.timeline({
            scrollTrigger: {
                trigger: card,
                start: 'top bottom',
            }
        })

        tl.from(img, {
            opacity: 0,
            x: -100,
            duration: 2,
            ease: "power4"
        })
        .from(info, {
            x: 100,
            opacity: 0,
            duration: 2,
            ease: "power4"
        },"+0.4")
        .from(props, {
            x: -100,
            opacity: 0,
            duration: 2,
            ease: "power4"
        },"+0.4")
    })
}

function categoryCardAnim() {
    let categoryCards = document.querySelectorAll(".category-card")

    categoryCards.forEach(card => {
        let img = card.querySelector(".category-card__img")
        let title = card.querySelector(".category-card__title")

        const tl = gsap.timeline({
            scrollTrigger: {
                trigger: card,
                start: 'top bottom',
            }
        })

        tl.from(img, {
            opacity: 0,
            x: 100,
            duration: 2,
            ease: "power4"
        }).from(title, {
                x: -100,
                opacity: 0,
                duration: 2,
                ease: "power4"
            },"<")
    })
}


function cardAnimation(card) {
    gsap.from(card, {
        // yPercent: 40,
        opacity: 0,
        duration: 3,
        scrollTrigger: {
            trigger: card,
            start: 'top bottom',
            toggleActions: 'play none none reverse'
        }
    })
}

function titleAnimation(title) {
    gsap.from(title, {
        x: -100,
        opacity: 0,
        duration: 1,
        scrollTrigger: {
            trigger: title,
            start: 'top bottom',
            toggleActions: 'play none none reverse'
        }
    })
}

let getScrollBarSize = (function() {
    let el = window.document.createElement('textarea'), style = {
        'visibility': 'hidden', 'position': 'absolute', 'zIndex': '-2147483647',
        'top': '-1000px', 'left': '-1000px', 'width': '1000px', 'height': '1000px',
        'overflow': 'scroll', 'margin': '0', 'border': '0', 'padding': '0'
    }, support = el.clientWidth !== undefined && el.offsetWidth !== undefined;

    for (let key in style) {
        if (style.hasOwnProperty(key)) {
            el.style[key] = style[key];
        }
    }

    return function() {
        let size = null;
        if (support && window.document.body) {
            window.document.body.appendChild(el);
            size = [el.offsetWidth - el.clientWidth, el.offsetHeight - el.clientHeight];
            window.document.body.removeChild(el);
        }
        document.documentElement.style.setProperty('--scrollWidth', `${size[0]}px`);
        return size;
    };
})();

function addBodyPadding(el) {
    $(el).css("padding-right",`${getScrollBarSize()[0]}px`)
}

function removeBodyPadding(el) {
    $(el).css("padding-right", "0px")
}

(function() {
    /**
     * Корректировка округления десятичных дробей.
     *
     * @param {String}  type  Тип корректировки.
     * @param {Number}  value Число.
     * @param {Integer} exp   Показатель степени (десятичный логарифм основания корректировки).
     * @returns {Number} Скорректированное значение.
     */
    function decimalAdjust(type, value, exp) {
        // Если степень не определена, либо равна нулю...
        if (typeof exp === 'undefined' || +exp === 0) {
            return Math[type](value);
        }
        value = +value;
        exp = +exp;
        // Если значение не является числом, либо степень не является целым числом...
        if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {
            return NaN;
        }
        // Сдвиг разрядов
        value = value.toString().split('e');
        value = Math[type](+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));
        // Обратный сдвиг
        value = value.toString().split('e');
        return +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));
    }

    // Десятичное округление к ближайшему
    if (!Math.round10) {
        Math.round10 = function(value, exp) {
            return decimalAdjust('round', value, exp);
        };
    }
    // Десятичное округление вниз
    if (!Math.floor10) {
        Math.floor10 = function(value, exp) {
            return decimalAdjust('floor', value, exp);
        };
    }
    // Десятичное округление вверх
    if (!Math.ceil10) {
        Math.ceil10 = function(value, exp) {
            return decimalAdjust('ceil', value, exp);
        };
    }
})();

$(".filter-group__show").click(function () {
    $(this).parents(".filter-group").toggleClass("_active")
    $(this).siblings(".filter-group__hidden").slideToggle()
})

let rangeSliders = document.querySelectorAll("._range-slider")

rangeSliders.forEach(slider => {
    const rangeSlider = slider.querySelector(`.range-slider`)
    const rangeInput0 = slider.querySelector(`.range-slider__input1`)
    const rangeInput1 = slider.querySelector(`.range-slider__input2`)
    const rangeInputs = [rangeInput0, rangeInput1]
    let min = +slider.getAttribute("data-min")
    let max = +slider.getAttribute("data-max")
    let step = +slider.getAttribute("data-step")
    console.log(step)
    if (rangeSlider) {
        noUiSlider.create(rangeSlider, {
            start: [min, max],
            connect: true,
            step: step,
            range: {
                'min': min,
                'max': max
            }
        });
    }
    if (rangeSlider) {
        rangeSlider.noUiSlider.on('update', function(values, handle) {
            if(step < 1){
                // console.log(values[handle][0])
                // console.log(values[handle][1])
                rangeInputs[handle].value = Math.round10(values[handle],-1)
                return
            }
            rangeInputs[handle].value = Math.round(values[handle])
        })
        rangeInputs.forEach((el, index) => {
            el.addEventListener('change', (e) => {
                setRangeSlider(index, e.currentTarget.value)
            })
        })
    }


    const setRangeSlider = (i, value) => {
        let array = [null, null];
        array[i] = value;

        rangeSlider.noUiSlider.set(array);
    };
})


$(".favourite-btn").click(function () {
    $(this).toggleClass("_active")
})

//
// $(".filter-top").click(function () {
//     if(window.innerWidth<993){
//         $(this).toggleClass("_active")
//         $(this).siblings(".filter-bottom").slideToggle()
//     }
// })


$(".info-nav__link").click(function(event) {
    event.preventDefault();
    var idc = $(this).attr('href'),
        top = $(idc).offset().top;
    $('body,html').animate({ scrollTop: top}, 500);
});

$(window).scroll(function() {
    var $sections = $('.info-group');
    $sections.each(function(i, el) {
        var top = $(el).offset().top - 165;
        var bottom = top + $(el).height();
        var scroll = $(window).scrollTop();
        var idn = $(el).attr('id');
        if (scroll > top && scroll < bottom) {
            $('a.info-nav__link._active').removeClass('_active');
            $('a[href="#' + idn + '"]').addClass('_active');
        }
    });
});

let modalTogglers = document.querySelectorAll("[data-modal]")
let body = document.querySelector("body")
let header = document.querySelector(".header")

modalTogglers.forEach(el => {
    el.onclick = function () {
        let modalId = el.getAttribute("data-modal")
        let modal = document.querySelector(`#${modalId}`)
        let closeButtons = modal.querySelectorAll(`._close-modal`)

        body.style.paddingRight = `${getScrollBarSize()[0]}px`
        modal.classList.add("_active")
        body.classList.add("fixed-body")

        console.log(closeButtons)

        closeButtons.forEach(btn => {
            btn.onclick = ()=> {
                body.style.paddingRight = 0
                modal.classList.remove("_active")
                body.classList.remove("fixed-body")
            }
        })
    }
})

// var getScrollBarSize = (function() {
//     var el = window.document.createElement('textarea'), style = {
//         'visibility': 'hidden', 'position': 'absolute', 'zIndex': '-2147483647',
//         'top': '-1000px', 'left': '-1000px', 'width': '1000px', 'height': '1000px',
//         'overflow': 'scroll', 'margin': '0', 'border': '0', 'padding': '0'
//     }, support = el.clientWidth !== undefined && el.offsetWidth !== undefined;
//
//     for (var key in style) {
//         if (style.hasOwnProperty(key)) {
//             el.style[key] = style[key];
//         }
//     }
//
//     return function() {
//         var size = null;
//         if (support && window.document.body) {
//             window.document.body.appendChild(el);
//             size = [el.offsetWidth - el.clientWidth, el.offsetHeight - el.clientHeight];
//             window.document.body.removeChild(el);
//         }
//
//         document.documentElement.style.setProperty('--scrollWidth', `${size[0]}px`);
//         return size;
//     };
// })();

let map = document.querySelector("#map")
if(map){
    ymaps.ready(init);
}


let coord = [54.314192, 48.403132]
let mapPoints = [
    {
        title: "Название проекта в две строки будет тут",
        images: [
            'img/object2.webp',
            'img/object2.webp',
        ],
        cords: [58.523066, 31.268387],
        linkHref:"#href"
    },
    {
        title: "Название проекта в две строки будет тут",
        images: [
            'img/object2.webp',
            'img/object2.webp',
        ],
        cords: [56.736341, 37.161960],
        linkHref:"#href"
    },
    {
        title: "Название проекта в две строки будет тут",
        images: [
            'img/object2.webp',
            'img/object2.webp',
        ],
        cords: [54.782652, 32.044321],
        linkHref:"#href"
    },
    {
        title: "Название проекта в две строки будет тут",
        images: [
            'img/object2.webp',
            'img/object2.webp',
        ],
        cords: [52.721160, 41.452166],
        linkHref:"#href"
    },
    {
        title: "Название проекта в две строки будет тут",
        images: [
            'img/object2.webp',
            'img/object2.webp',
        ],
        cords: [58.603435, 49.667615],
        linkHref:"#href"
    },
    {
        title: "Название проекта в две строки будет тут",
        images: [
            'img/object2.webp',
            'img/object2.webp',
        ],
        cords: [55.795947, 49.105922],
        linkHref:"#href"
    },
    {
        title: "Название проекта в две строки будет тут",
        images: [
            'img/object2.webp',
            'img/object2.webp',
        ],
        cords: [57.152864, 65.540597],
        linkHref:"#href"
    },
    {
        title: "Название проекта в две строки будет тут",
        images: [
            'img/object2.webp',
            'img/object2.webp',
        ],
        cords: [53.285322, 69.375114],
        linkHref:"#href"
    },
]



function init() {
    let myMap = new ymaps.Map("map", {
        center: coord,
        zoom: 4,
        controls: []
    });

    // myMap.behaviors.disable('scrollZoom');


    mapPoints.forEach((el,index) => {
        let slides = ``
        el.images.forEach(img => {
            slides += `
                <div class="swiper-slide">
                <img src="${img}" alt="">
                </div>
                `
        })

        let placeMark = new ymaps.Placemark(el.cords, {
                balloonContentHeader: ``,
                balloonContentBody: `
                <div id="place-card${index}" class="place-card">
                    <div class="place-card__title">
                        ${el.title}
                    </div>
                    <div class="slider">
                        <div class="swiper-container">
                            <div class="swiper-wrapper">
                            ${slides}
                            </div>
                        </div>
                        <div class="swiper-nav">
                            <div class="swiper-button swiper-button-prev">
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M13.7751 18.707L8.48206 13.414C8.10712 13.0389 7.89648 12.5303 7.89648 12C7.89648 11.4696 8.10712 10.961 8.48206 10.586L13.7751 5.29297L15.1891 6.70697L9.90006 12L15.1931 17.293L13.7751 18.707Z" fill="black"/>
                                </svg>
                            </div>
                            <div class="swiper-button swiper-button-next">
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M10.2249 18.707L15.5179 13.414C15.8929 13.0389 16.1035 12.5303 16.1035 12C16.1035 11.4696 15.8929 10.961 15.5179 10.586L10.2249 5.29297L8.81094 6.70697L14.0999 12L8.80694 17.293L10.2249 18.707Z" fill="black"/>
                                </svg>
                            </div>
                        </div>
                    </div>
                    <a href="${el.linkHref}" class="place-card__link">
                        <div class="place-card__link-icon">
                           <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M10.2249 18.707L15.5179 13.414C15.8929 13.0389 16.1035 12.5303 16.1035 12C16.1035 11.4696 15.8929 10.961 15.5179 10.586L10.2249 5.29297L8.81094 6.70697L14.0999 12L8.80694 17.293L10.2249 18.707Z" fill="black"/>
                            </svg>
                        </div>
                        <div class="place-card__link-title">
                           смотреть проект
                        </div>
                    </a>
                </div>
             
                `,
                balloonContentFooter: '',
                hintContent: '',
                build: function () {
                    console.log(true)
                }
            },
            {
                iconLayout: 'default#image',
                iconImageHref: "img/mark.svg",
                iconImageSize: [40, 40],
            },
        );
        myMap.geoObjects.add(placeMark);

        placeMark.events.add('balloonopen', function (e) {
            let test = document.querySelector(`#place-card${index} .slider`)
            let swiper = new Swiper(`#place-card${index} .swiper-container`, {
                slidesPerView: "auto",
                spaceBetween: 0,
                loop: true,
                navigation: {
                    nextEl: `#place-card${index} .swiper-button-next`,
                    prevEl: `#place-card${index} .swiper-button-prev`,
                },
            })
        });
    })



}

$(".category__top").click(function(){
    $(".page").addClass("_open-category");
    $(".category").removeClass("_open");
    $(this).parents(".category").addClass("_open");
})

$("._close-category").click(function(){
    $(".page").removeClass("_open-category");
    $(".category").removeClass("_open");
})

$("._open-level2").click(function(){
    let title = $(this).find(".menu-item__title").text()
    $(this).parents(".menu-item").addClass("_show-level2");
    $(".page").addClass("_level2-menu");
    $(".menu-back ._view2").html(title)
})

$("._open-level3").click(function(){
    let title = $(this).find(".menu-item__title").text()
    $(this).parents(".menu-item").addClass("_show-level3");
    $(".page").addClass("_level3-menu");
    $(".menu-back ._view3").html(title)
})

$(".catalog-menu .menu-back").click(function(){
    if($(".page").hasClass("_level3-menu")){
        $(".page").removeClass("_level3-menu")
        $(".menu-item").removeClass("_show-level3");
    }
    else if($(".page").hasClass("_level2-menu")){
        $(".page").removeClass("_level2-menu")
        $(".menu-item").removeClass("_show-level2");
    }
    else{
        $(".catalog-menu").removeClass("_open");
        $("body").removeClass("fixed-body")
    }
})

$("._show-catalog-menu").click(function(){
    $(".page").removeClass("_level3-menu")
    $(".menu-item").removeClass("_show-level3");
    $(".page").removeClass("_level2-menu")
    $(".menu-item").removeClass("_show-level2");
    $(".catalog-menu").addClass("_open");
    $("body").addClass("fixed-body")
})

$(".catalog-menu__bg").click(function(){
    $(".catalog-menu").removeClass("_open");
    $("body").removeClass("fixed-body")
})

$("._show-filter").click(function(){
    $(".mob-filter").addClass("_open");
    $("body").addClass("fixed-body")
})

$(".mob-filter__bg, .mob-filter .menu-back").click(function(){
    $(".mob-filter").removeClass("_open");
    $("body").removeClass("fixed-body")
})
$(document).ready(function() {
    $('input[type="tel"]').mask('+7 999 999-9999', { autoclear: false }, { placeholder: '+7             ' });


    getScrollBarSize()
    fix100vh()
    $(window).resize(function () {
        getScrollBarSize()
        fix100vh()
    })
});


function fix100vh() {
    let vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', `${vh}px`);
}

$("._tab").click(function() {
    let tabId = $(this).attr("data-tab")
    let parentBlock = $(this).parents("._tabs-parent")

    $(parentBlock).find("._tab").removeClass("_active")
    $(this).addClass("_active")
    $(parentBlock).find(".tab-content").removeClass("_active")
    $(parentBlock).find(`.${tabId}`).addClass("_active")


    if(window.innerWidth<=992){
        $(".mob-menu").addClass("_fix")
        $(parentBlock).find(`.${tabId}`).addClass("_active2")
    }
})

$(".catalog__back").click(function () {
    $(".catalog__tab").removeClass("_active")
    $(".catalog .tab-content").removeClass("_active")
    $(".catalog .tab-content").removeClass("_active2")
    $(".mob-menu").removeClass("_fix")
})

$(".fg input").each(function(index, el) {
    InputIsFilled($(el))
});

$(".fg textarea").each(function(index, el) {
    InputIsFilled($(el))
});


$(".fg input").change(function() {
    InputIsFilled($(this))
})

$(".fg textarea").change(function() {
    InputIsFilled($(this))
})


function InputIsFilled(el) {
    if ($(el).val()) {
        $(el).addClass("input-active")
    } else {
        $(el).removeClass("input-active")
    }
}

//# sourceMappingURL=../sourcemaps/main.min.js.map
